const bodyparser = require('co-body');

const REQUEST_BODY_DESC = 'request body';

const validationCode = 'KOA_REQUEST_VALIDATION_ERROR';

function buildError(message) {
    const e = new Error(message);
    e.code = validationCode;
    return e;
}

function isValidationError(e) {
    return e && e.code == validationCode;
}

module.exports = {
    buildError: buildError,
    isValidationError: isValidationError,
    validationCode: validationCode,
    body: schema => async (ctx, next) => {
        if (!ctx.request.body) {
            ctx.request.body = await bodyparser.form(ctx.req);
        }
        console.log(ctx.request.body);
        
        const unprocessedKeys = new Set(Object.keys(ctx.request.body));
        
        const bodySchema = schema || {};
        await Promise.all(Object.keys(bodySchema).map(key => {
            unprocessedKeys.delete(key);
            return bodySchema[key](
                    REQUEST_BODY_DESC, key, ctx.request.body[key]);
        }));
        
        assertEmpty(REQUEST_BODY_DESC, unprocessedKeys);
        
        await next();
    },
    required: async (sourceDesc, key, value) => {
        if (value === undefined) {
            throw buildError(`Expected "${key}" in ${sourceDesc}.`);
        }
    },
    optional: async (sourceDesc, key, value) => {}
};

function assertEmpty(sourceDesc, set) {
    if (set.size > 0) {
        throw buildError(`Unexpected fields in ${sourceDesc}: ${set}`);
    }
}